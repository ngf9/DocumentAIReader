// This file is auto-generated by @hey-api/openapi-ts

import { type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { PdfServiceUploadAndProcessPdfData, PdfServiceUploadAndProcessPdfResponse, PdfServiceUploadAndProcessPdfError, PdfServiceGetDocumentData, PdfServiceGetDocumentResponse, PdfServiceGetDocumentError, PdfServiceListDocumentsData, PdfServiceListDocumentsResponse, ChatServiceChatWithDocumentData, ChatServiceChatWithDocumentResponse, ChatServiceChatWithDocumentError, ChatServiceGetDocumentInfoData, ChatServiceGetDocumentInfoResponse, ChatServiceGetDocumentInfoError, ShareServiceCreateShareableLinkData, ShareServiceCreateShareableLinkResponse, ShareServiceCreateShareableLinkError, ShareServiceGetDocumentByShareTokenData, ShareServiceGetDocumentByShareTokenResponse, ShareServiceGetDocumentByShareTokenError, ShareServiceCreateChatSessionData, ShareServiceCreateChatSessionResponse, ShareServiceCreateChatSessionError, ShareServiceGetChatSessionData, ShareServiceGetChatSessionResponse, ShareServiceGetChatSessionError, ShareServiceUpdateChatSessionActivityData, ShareServiceUpdateChatSessionActivityError, ShareServiceRevokeShareAccessData, ShareServiceRevokeShareAccessResponse, ShareServiceRevokeShareAccessError, SharedChatServiceChatWithSharedDocumentData, SharedChatServiceChatWithSharedDocumentResponse, SharedChatServiceChatWithSharedDocumentError, SharedChatServiceGetSharedChatHistoryData, SharedChatServiceGetSharedChatHistoryResponse, SharedChatServiceGetSharedChatHistoryError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Pdf Service Upload And Process Pdf
 * Upload PDF file, extract text, generate embeddings, and store everything.
 */
export const pdfServiceUploadAndProcessPdf = <ThrowOnError extends boolean = false>(options: Options<PdfServiceUploadAndProcessPdfData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PdfServiceUploadAndProcessPdfResponse, PdfServiceUploadAndProcessPdfError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/pdf_service/upload_and_process_pdf',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Pdf Service Get Document
 * Get document by ID with presigned URL for PDF access.
 */
export const pdfServiceGetDocument = <ThrowOnError extends boolean = false>(options: Options<PdfServiceGetDocumentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PdfServiceGetDocumentResponse, PdfServiceGetDocumentError, ThrowOnError>({
        url: '/api/pdf_service/get_document',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pdf Service List Documents
 * List all documents with presigned URLs.
 */
export const pdfServiceListDocuments = <ThrowOnError extends boolean = false>(options?: Options<PdfServiceListDocumentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PdfServiceListDocumentsResponse, unknown, ThrowOnError>({
        url: '/api/pdf_service/list_documents',
        ...options
    });
};

/**
 * Chat Service Chat With Document
 * Chat with a document using RAG (Retrieval Augmented Generation).
 */
export const chatServiceChatWithDocument = <ThrowOnError extends boolean = false>(options: Options<ChatServiceChatWithDocumentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChatServiceChatWithDocumentResponse, ChatServiceChatWithDocumentError, ThrowOnError>({
        url: '/api/chat_service/chat_with_document',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Chat Service Get Document Info
 * Get basic information about a document for the chat interface.
 */
export const chatServiceGetDocumentInfo = <ThrowOnError extends boolean = false>(options: Options<ChatServiceGetDocumentInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChatServiceGetDocumentInfoResponse, ChatServiceGetDocumentInfoError, ThrowOnError>({
        url: '/api/chat_service/get_document_info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Share Service Create Shareable Link
 * Create a shareable link for a document.
 */
export const shareServiceCreateShareableLink = <ThrowOnError extends boolean = false>(options: Options<ShareServiceCreateShareableLinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ShareServiceCreateShareableLinkResponse, ShareServiceCreateShareableLinkError, ThrowOnError>({
        url: '/api/share_service/create_shareable_link',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Share Service Get Document By Share Token
 * Get a document by its share token.
 */
export const shareServiceGetDocumentByShareToken = <ThrowOnError extends boolean = false>(options: Options<ShareServiceGetDocumentByShareTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ShareServiceGetDocumentByShareTokenResponse, ShareServiceGetDocumentByShareTokenError, ThrowOnError>({
        url: '/api/share_service/get_document_by_share_token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Share Service Create Chat Session
 * Create a new chat session for a document.
 */
export const shareServiceCreateChatSession = <ThrowOnError extends boolean = false>(options: Options<ShareServiceCreateChatSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ShareServiceCreateChatSessionResponse, ShareServiceCreateChatSessionError, ThrowOnError>({
        url: '/api/share_service/create_chat_session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Share Service Get Chat Session
 * Get a chat session by its token.
 */
export const shareServiceGetChatSession = <ThrowOnError extends boolean = false>(options: Options<ShareServiceGetChatSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ShareServiceGetChatSessionResponse, ShareServiceGetChatSessionError, ThrowOnError>({
        url: '/api/share_service/get_chat_session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Share Service Update Chat Session Activity
 * Update the last activity timestamp for a chat session.
 */
export const shareServiceUpdateChatSessionActivity = <ThrowOnError extends boolean = false>(options: Options<ShareServiceUpdateChatSessionActivityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, ShareServiceUpdateChatSessionActivityError, ThrowOnError>({
        url: '/api/share_service/update_chat_session_activity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Share Service Revoke Share Access
 * Revoke public access to a document.
 */
export const shareServiceRevokeShareAccess = <ThrowOnError extends boolean = false>(options: Options<ShareServiceRevokeShareAccessData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ShareServiceRevokeShareAccessResponse, ShareServiceRevokeShareAccessError, ThrowOnError>({
        url: '/api/share_service/revoke_share_access',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Shared Chat Service Chat With Shared Document
 * Chat with a shared document using a session token.
 */
export const sharedChatServiceChatWithSharedDocument = <ThrowOnError extends boolean = false>(options: Options<SharedChatServiceChatWithSharedDocumentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SharedChatServiceChatWithSharedDocumentResponse, SharedChatServiceChatWithSharedDocumentError, ThrowOnError>({
        url: '/api/shared_chat_service/chat_with_shared_document',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Shared Chat Service Get Shared Chat History
 * Get chat history for a shared session.
 */
export const sharedChatServiceGetSharedChatHistory = <ThrowOnError extends boolean = false>(options: Options<SharedChatServiceGetSharedChatHistoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SharedChatServiceGetSharedChatHistoryResponse, SharedChatServiceGetSharedChatHistoryError, ThrowOnError>({
        url: '/api/shared_chat_service/get_shared_chat_history',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};